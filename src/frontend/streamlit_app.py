import os
import streamlit as st
import requests
import folium
from streamlit_folium import folium_static
from streamlit_mermaid import st_mermaid

# Titre principal de l'application
st.title("Pr√©diction du temps d'intervention des pompiers de Londres")

# Menu de navigation √©tendu
page = st.sidebar.radio(
    "Navigation",
    ["Contexte", "Exploration", "Mod√©lisation", "Architecture", "Pr√©diction", "Logs", "En cours de d√©veloppement"]
)

def show_context():
    """Affiche la section Contexte."""
    st.subheader("Contexte du Projet")
    
    st.markdown("""
    ### London Fire Brigade
    La London Fire Brigade (LFB) est le service d'incendie et de secours de Londres. C'est l'un des plus grands services 
    d'incendie et de secours au monde avec environ :
    - 5 500 pompiers op√©rationnels et officiers
    - 100 stations de pompiers
    - 6 000 appels d'urgence par mois
    
    ### Objectif du Projet
    D√©velopper un mod√®le de Machine Learning pour pr√©dire le temps d'intervention des pompiers de Londres en fonction de :
    - La localisation de l'incident
    - L'heure de l'appel
    - Le type d'incident
    - Le type de propri√©t√©
    """)

def show_exploration():
    """Affiche la section Exploration."""
    st.subheader("Exploration des Donn√©es")
    
    st.markdown("""
    ### Sources de Donn√©es
    Les donn√©es proviennent de trois sources principales :
    1. **Incidents (2009-2024)**
       - Informations sur chaque incident
       - Localisation, type, date et heure
       
    2. **Mobilisations (2009-2024)**
       - D√©tails des interventions
       - Temps de r√©ponse, casernes mobilis√©es
       
    3. **Stations**
       - Informations sur les casernes
       - Localisation, zone de couverture
    
    ### Preprocessing
    Les principales √©tapes de pr√©paration :
    1. Nettoyage des donn√©es manquantes
    2. Conversion des coordonn√©es g√©ographiques
    3. Calcul des distances entre incidents et stations
    4. Encodage des variables cat√©gorielles
    5. Filtrage des valeurs aberrantes
    """)
    
    # Ici on pourrait ajouter des visualisations

def show_modeling():
    """Affiche la section Mod√©lisation."""
    st.subheader("Mod√©lisation")
    
    st.markdown("""
    ### Choix du Mod√®le
    Le mod√®le XGBoost a √©t√© s√©lectionn√© pour :
    - Sa performance sur les donn√©es tabulaires
    - Sa capacit√© √† g√©rer les relations non-lin√©aires
    - Sa robustesse aux valeurs aberrantes
    
    ### Variables Utilis√©es
    Le mod√®le prend en compte :
    - Heure de l'appel
    - Type d'incident
    - Type de propri√©t√©
    - Localisation de l'incident
    - Distance √† la caserne la plus proche
    
    ### M√©triques de Performance
    - MSE (Mean Squared Error)
    - R¬≤ Score
    - Distribution des erreurs
    """)
    
    # Ici on pourrait ajouter des graphiques de performance

def show_architecture():
    """Affiche le diagramme d'architecture du projet."""
    st.subheader("Architecture du Projet")
    
    # Cr√©ation du diagramme Mermaid
    mermaid_diagram = """
    graph TB
        subgraph Docker Environment
            subgraph Frontend Container
                A[Streamlit App<br>Port 8501] --> B[Requests]
            end
            
            subgraph API Container
                C[FastAPI<br>Port 8000] --> D[Prediction Module]
                D --> E[XGBoost Model]
                D --> F[Label Encoders]
                D --> G[Stations Data]
            end
            
            B --> |HTTP POST<br>/predict| C
        end
        
        subgraph Data Pipeline
            K[Data Processing<br>preprocess.py] --> E
            K --> F
            K --> G
        end
        
        subgraph Shared Volumes
            H[(data/)] -.-> G
            H -.-> K
            I[(models/)] -.-> E
            I -.-> F
            J[(logs/)] -.-> |api.log| C
            J -.-> |preprocess.log| K
        end
        
        style Frontend Container fill:#f9f,stroke:#333,stroke-width:2px
        style API Container fill:#bbf,stroke:#333,stroke-width:2px
        style Shared Volumes fill:#bfb,stroke:#333,stroke-width:2px
        style Data Pipeline fill:#ffb,stroke:#333,stroke-width:2px
    """
    
    # Affichage du diagramme avec st_mermaid
    st_mermaid(mermaid_diagram)
    
    # Description de l'architecture
    st.markdown("""
    #### Description de l'Architecture
    
    Le projet est compos√© de deux conteneurs Docker principaux :
    
    1. **Frontend (Streamlit)**
       - Interface utilisateur interactive
       - Port 8501
       - Envoie les requ√™tes de pr√©diction √† l'API
    
    2. **API (FastAPI)**
       - G√®re les requ√™tes de pr√©diction
       - Port 8000
       - Utilise le mod√®le XGBoost pour les pr√©dictions
       - Acc√®de aux donn√©es des stations
    
    #### Volumes Partag√©s
    
    Les conteneurs partagent trois volumes principaux :
    - **/data** : Donn√©es des stations
    - **/models** : Mod√®le XGBoost et encodeurs
    - **/logs** : Fichiers de logs
    """)

def show_prediction():
    # Formulaire de saisie
    address = st.text_input("Adresse", "Big Ben, London")
    hour = st.number_input("Heure d'appel", min_value=0, max_value=23, value=10)
    incident_group = st.selectbox("Type d'incident", ["Fire", "Special Service", "False Alarm"])
    property_category = st.selectbox("Type de propri√©t√©", ["Dwelling", "Other Residential", "Office"])


    # Bouton de pr√©diction

    if st.button("Pr√©dire le temps d'intervention"):
        
        # R√©cup√©rer l'URL de l'API depuis les variables d'environnement
        # # avec une valeur par d√©faut pour le d√©veloppement local
        api_url = os.getenv('API_URL', 'http://127.0.0.1:8000')
        url = f"{api_url}/predict"

        # Pr√©parer la requ√™te        
        headers = {"Content-Type": "application/json"}
        data = {
            "address": address,
            "HourOfCall": hour,
            "IncidentGroup": incident_group,
            "PropertyCategory": property_category
        }
        
        try:
            # Envoyer la requ√™te
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            
            # R√©cup√©rer les r√©sultats
            results = response.json()
            
            # Afficher les r√©sultats
            col1, col2 = st.columns(2)
            
            with col1:
                st.success(f"‚è±Ô∏è Temps d'intervention estim√© : {results['prediction']:.1f} secondes")
                st.info(f"üöí Caserne : {results['station']}")
                st.info(f"üìç Arrondissement : {results['StationBorough']}")
                st.info(f"üìè Distance : {results['DistanceToStation'] / 1000:.3f} km")
                
            with col2:
                # Cr√©er la carte
                m = folium.Map(location=[results['latitude'], results['longitude']], zoom_start=13)
                
                # Marquer l'incident
                incident_popup = f"""
Lieu de l'incident

Adresse : {address}
Latitude : {results['latitude']}
Longitude : {results['longitude']}
"""
                folium.Marker(
                    [results['latitude'], results['longitude']],
                    popup=incident_popup,
                    icon=folium.Icon(color='red', icon='info-sign')
                ).add_to(m)

                # Marquer la caserne
                station_popup = f"""
Caserne {results['station']}

Latitude : {results['StationLatitude']}
Longitude : {results['StationLongitude']}

Distance : {results['DistanceToStation'] / 1000:.3f} km
"""
                folium.Marker(
                    [results['StationLatitude'], results['StationLongitude']],
                    popup=station_popup,
                    icon=folium.Icon(color='blue', icon='info-sign')
                ).add_to(m)

                # Tracer une ligne entre l'incident et la caserne
                distance_popup = f"""
Distance : {results['DistanceToStation'] / 1000:.3f} km
"""
                folium.PolyLine(
                    locations=[
                        [results['latitude'], results['longitude']],
                        [results['StationLatitude'], results['StationLongitude']]
                    ],
                    weight=2,
                    color='red',
                    dash_array='10',
                    popup=distance_popup
                ).add_to(m)
                
                # Afficher la carte
                folium_static(m)
                
        except requests.exceptions.RequestException as e:
            st.error(f"Erreur lors de la requ√™te : {str(e)}")

def show_logs():
    """Affiche la section Logs."""
    st.subheader("Logs du Syst√®me")
    
    st.markdown("""
    ### Types de Logs
    Le syst√®me maintient plusieurs fichiers de logs :
    1. **Logs API**
       - Requ√™tes re√ßues
       - Temps de traitement
       - Erreurs √©ventuelles
       
    2. **Logs Preprocessing**
       - √âtapes de traitement des donn√©es
       - Statistiques sur les donn√©es
       - Alertes et erreurs
       
    3. **Logs Pr√©diction**
       - D√©tails des pr√©dictions
       - Performance du mod√®le
       - Temps de r√©ponse
    """)
    
    # Option pour afficher les derniers logs
    if st.checkbox("Afficher les derniers logs"):
        try:
            with open("logs/api.log", "r") as f:
                last_logs = f.readlines()[-50:]  # 50 derni√®res lignes
                for log in last_logs:
                    st.text(log.strip())
        except Exception as e:
            st.error(f"Erreur lors de la lecture des logs : {str(e)}")

def show_development():
    """Affiche la section En cours de d√©veloppement."""
    st.subheader("En cours de d√©veloppement")
    
    st.markdown("""
    ### Fonctionnalit√©s √† venir
    
    1. **S√©curit√©**
       - Authentification des utilisateurs
       - Gestion des r√¥les et permissions
       - Historique des connexions
    
    2. **Am√©lioration du Mod√®le**
       - Int√©gration des conditions m√©t√©orologiques
       - Prise en compte du trafic routier
       - Mise √† jour automatique du mod√®le
    
    3. **Interface**
       - Dashboard de monitoring
       - Visualisations avanc√©es
       - Export des r√©sultats
    
    4. **Infrastructure**
       - Mise en place de tests automatis√©s
       - Monitoring des performances
       - Gestion des sauvegardes
    """)



# Affichage de la section s√©lectionn√©e
if page == "Contexte":
    show_context()
elif page == "Exploration":
    show_exploration()
elif page == "Mod√©lisation":
    show_modeling()
elif page == "Architecture":
    show_architecture()
elif page == "Pr√©diction":
    show_prediction()
elif page == "Logs":
    show_logs()
else:  # En cours de d√©veloppement
    show_development()

